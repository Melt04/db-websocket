#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const http = require("http");
const port = process.env.PORT || "8080";
const { Server: IOServer } = require("socket.io");
const PRODUCTS = require("../data");
let MENSAJES;
const fs = require("fs");

const readFile = async () => {
  try {
    const data = await fs.promises.readFile("./data/messages.json", "utf8");

    return data;
  } catch (err) {
    console.log(err);
  }
};
const writeFile = async (messages) => {
  try {
    const data = await fs.promises.writeFile("./data/messages.json", messages, "utf8");
  } catch (e) {
    console.log(e);
  }
};

app.set("port", port);
/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = new IOServer(server);
app.set("io", io);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", async () => {
  MENSAJES = JSON.parse(await readFile());
  onListening();
});

/**
 * Normalize a port into a number, string, or false.
 */

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

io.on("connection", (socket) => {
  console.log(`Usuario ${socket.id}`);
  socket.emit("products", PRODUCTS);
  socket.emit("messages", MENSAJES);
  socket.on("new-message", async (data) => {
    date = `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()} `;
    MENSAJES.push({ ...data, date });
    writeFile(JSON.stringify(MENSAJES));
    io.sockets.emit("messages", MENSAJES);
  });
});
function onListening() {
  console.log(`Escuchando en puerto ${port}`);
}
